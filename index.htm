<!DOCTYPE html>
<html>
    <body>
        <input type="file" id="file" style="display:none" />
        <input type="button" id="upload" value="UPLOAD" />
        <a id="download" style="display:none">hehe</a>

        
        <script src="wasm_exec.js"></script>
        <script type="text/javascript">
            const go = new Go();
            WebAssembly.instantiateStreaming(fetch("image-upload.wasm"), go.importObject).then((result) => {
                go.run(result.instance);
                
                
                const finputDOM = document.getElementById("file")
                const buttonDOM = document.getElementById("upload")
                const downloadDOM = document.getElementById("download")

                finputDOM.onchange = e => {
                    if (e.target.files && e.target.files[0]) {
                        for (let i = 0; i < e.target.files.length; i++) {
                            var reader = new FileReader();
                            reader.onloadend = (buf) => {
                                const result = buf.target.result;
                                const length = result.byteLength;

                                const resultUint = new Uint8Array(result);

                                // const size = GetSize(length, resultUint);
                                // console.log(size);

                                
                                // const gg = Crop(length, resultUint, size.width / 2 , size.height /2, 1, 1, 10000);
                                
                                const imageRGBA = GetRGBA(resultUint.length, resultUint)
                                console.log(imageRGBA);

                                // centerX, centerY, ratioX, ratioY
                                const cropParams = [
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 1, 1],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 1, 2],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 1, 3],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 1, 4],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 2, 1],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 2, 3],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 3, 1],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 3, 2],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 3, 4],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 4, 1],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 4, 3],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 9, 16],
                                    [imageRGBA.success.width/2, imageRGBA.success.height/2, 16, 7],
                                ]

                                const crops = cropParams.map( (params) => {
                                    return CropRGBA(
                                    imageRGBA.success.data.length, 
                                    imageRGBA.success.data,
                                    imageRGBA.success.width,
                                    imageRGBA.success.height,
                                    imageRGBA.success.stride,
                                    params[0],
                                    params[1],
                                    params[2],
                                    params[3],
                                    imageRGBA.success.width *imageRGBA.success.height // set is as very large
                                    )
                                })

                                console.log("Crops");
                                console.log(crops);
                            };
                            reader.readAsArrayBuffer(e.target.files[i]);
                        }
                    }
                }
                buttonDOM.onclick = e => {
                    finputDOM.click()
                }
                ;
            });
        </script>
    </body>
</html>