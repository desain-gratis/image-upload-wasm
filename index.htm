<!DOCTYPE html>
<html>
    <body>
        <input type="file" id="file" style="display:none" />
        <input type="button" id="upload" value="UPLOAD" />
        <a id="download" style="display:none">hehe</a>

        <script src="./encode.js"></script>
        <script src="./wasm_exec.js"></script>
<!-- need to check each import best practices -->

        <script type="text/javascript">
            const go = new Go();
            WebAssembly.instantiateStreaming(fetch("image-upload.wasm"), go.importObject).then((result) => {
                go.run(result.instance);
                
                
                const finputDOM = document.getElementById("file")
                const buttonDOM = document.getElementById("upload")
                const downloadDOM = document.getElementById("download")

                finputDOM.onchange = e => {
                    if (e.target.files && e.target.files[0]) {
                        for (let i = 0; i < e.target.files.length; i++) {
                            var reader = new FileReader();
                            reader.onloadend = async (buf) =>  {
                                const result = buf.target.result;
                                const length = result.byteLength;

                                const resultUint = new Uint8Array(result);

                                // const size = GetSize(length, resultUint);
                                // console.log(size);

                                
                                const fileName = e.target.files[i].name;

                                // const gg = Crop(length, resultUint, size.width / 2 , size.height /2, 1, 1, 10000);
                                
                                // If using golang
                                // const _imageRGBA = GetRGBA(resultUint.length, resultUint)
                                // const imageRGBA = _imageRGBA.success
                               
                                // If using canvas
                                const img = await createImageBitmap(e.target.files[i]);
                                // Make canvas same size as image
                                const canvas = document.createElement('canvas');
                                canvas.width = img.width;
                                canvas.height = img.height;
                                // Draw image onto canvas
                                const ctx = canvas.getContext('2d');
                                ctx.drawImage(img, 0, 0);
                                const imageRGBA = ctx.getImageData(0, 0, img.width, img.height);

                                // const idx = StoreRGBA(imageRGBA.data, imageRGBA.width, imageRGBA.height); // try no stride

                                // centerX, centerY, ratioX, ratioY
                                const cropParams = [
                                    [imageRGBA.width/2, imageRGBA.height/2, 1, 1],
                                    [imageRGBA.width/2, imageRGBA.height/2, 1, 2],
                                    [imageRGBA.width/2, imageRGBA.height/2, 1, 3],
                                    [imageRGBA.width/2, imageRGBA.height/2, 1, 4],
                                    [imageRGBA.width/2, imageRGBA.height/2, 2, 1],
                                    [imageRGBA.width/2, imageRGBA.height/2, 2, 3],
                                    [imageRGBA.width/2, imageRGBA.height/2, 3, 1],
                                    [imageRGBA.width/2, imageRGBA.height/2, 3, 2],
                                    [imageRGBA.width/2, imageRGBA.height/2, 3, 4],
                                    [imageRGBA.width/2, imageRGBA.height/2, 4, 1],
                                    [imageRGBA.width/2, imageRGBA.height/2, 4, 3],
                                    [imageRGBA.width/2, imageRGBA.height/2, 9, 16],
                                    [imageRGBA.width/2, imageRGBA.height/2, 16, 9],
                                ]

                                const crops = cropParams.map( (params) => {

                                    const cropped = CropRGBA(
                                            imageRGBA.data.length, 
                                            imageRGBA.data,
                                            imageRGBA.width,
                                            imageRGBA.height,
                                            // imageRGBA.stride,
                                            imageRGBA.width * 4,
                                            params[0],
                                            params[1],
                                            params[2],
                                            params[3],
                                            1.0
                                        )

                                    const idx = StoreRGBA(cropped.success.data, cropped.success.width, cropped.success.height, cropped.success.stride);
                                    // standarize height
                                    const h600 = ScaleRGBA(idx, "height", 600)
                                    // const h500 = ScaleRGBA(idx, "height", 500)
                                    // const h400 = ScaleRGBA(idx, "height", 400)
                                    // const h300 = ScaleRGBA(idx, "height", 300)
                                    // const h250 = ScaleRGBA(idx, "height", 250)
                                    // const h200 = ScaleRGBA(idx, "height", 200)
                                    // const h150 = ScaleRGBA(idx, "height", 150)

                                    
                                    return {
                                        "name": `${params[2]}x${params[3]}-${e.target.files[i].name}`,
                                        "ratio": `${params[2]}x${params[3]}`,
                                        "images": [cropped, h600],
                                    }
                                })


                                
                                crops.forEach(crop => {
                                    const data = crop.images[0].success.data;
                                    const length = data.byteLength;

                                    const width = crop.images[0].success.width;
                                    const height = crop.images[0].success.height;
                                    const stride = crop.images[0].success.stride;

                                    const filename = crop.name;

                                    // allocate input 
                                    // Copy result to mem

                                    const mem = Module._malloc(length);
                                    const resultSizeRef = Module._malloc(4);

                                    Module.HEAPU8.set(new Uint8Array(data), mem);
                                    Module.HEAPU8.set(new Uint32Array([0, 0, 0, 0]), resultSizeRef);

                                    const encodedWebpImageRef = Module._encodeRGBA(mem, width, height, stride, 90.0, resultSizeRef);

                                    // 4 byte integer, size of the image
                                    const resultSize = new Uint32Array(Module.HEAPU8.slice(resultSizeRef, resultSizeRef+4).buffer)[0];

                                    const resultArr = Module.HEAPU8.slice(encodedWebpImageRef, encodedWebpImageRef + resultSize);
                                    const b = new Blob([resultArr.buffer], {type: "image/webp"}) ; // later change to image/webp

                                    downloadDOM.href = window.URL.createObjectURL(b);
                                    downloadDOM.download = filename;
                                    downloadDOM.click();
                                    window.URL.createObjectURL(b);

                                    Module._falloc(resultSizeRef);
                                    Module._falloc(mem);
                                });
                            };
                            reader.readAsArrayBuffer(e.target.files[i]);
                        }
                    }
                }
                buttonDOM.onclick = e => {
                    finputDOM.click()
                }
                ;
            });
        </script>
    </body>
</html>